### YamlMime:Tutorial
title: Modificare numeri a virgola mobile e integrali in C#
metadata:
  title: Numeri in C# - Esercitazione interattiva introduttiva su C#
  description: In questa esercitazione sui tipi numerici si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Rami e cicli in C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 48268c6e839ae4f72aae0e872c837b153325b68b
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: it-IT
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "77504016"
items:
- durationInMinutes: 1
  content: >
    Questa esercitazione descrive l'uso interattivo di tipi numerici in C#, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione e dell'esecuzione del codice. L'esercitazione contiene una serie di lezioni che illustrano l'uso dei numeri e le operazioni matematiche in C#. Queste lezioni presentano le nozioni fondamentali del linguaggio C#.
- title: Esplorare le operazioni matematiche su interi
  durationInMinutes: 4
  content: >
    Eseguire il codice seguente nella finestra interattiva. Selezionare il **pulsante Attiva modalità messa a fuoco.** Quindi, digitare il seguente blocco di codice nella finestra interattiva e selezionare **Esegui**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Se si esegue questa operazione nell'ambiente, è necessario seguire le istruzioni per la [versione locale.](numbers-in-csharp-local.md)


    Questa è una delle operazioni matematiche fondamentali su interi. Il tipo `int` rappresenta un **intero**, ovvero un numero intero positivo o negativo. Per l'addizione si usa il simbolo `+`. Altre operazioni matematiche comuni per gli interi includono:


    - `-` per la sottrazione

    - `*` per la moltiplicazione

    - `/` per la divisione


    > [!TIP]

    > In tutte le parti di questa esercitazione interattiva è possibile esplorare liberamente i contenuti modificando il codice scritto nella finestra interattiva. Questa esercitazione offre esempi che è possibile provare a ogni passaggio.


    Per iniziare, esplorare le diverse operazioni. Modificare la terza riga per provare ognuna di queste operazioni. Dopo ogni modifica, selezionare il pulsante **Esegui.**


    Sottrazione:


    ```csharp

    int c = a - b;

    ```


    Moltiplicazione:


    ```csharp

    int c = a * b;

    ```


    Divisione:


    ```csharp

    int c = a / b;

    ```


    È anche possibile sperimentare eseguendo più operazioni matematiche nella stessa riga.


    > [!TIP]

    > Mentre si impara a usare C# (o qualsiasi linguaggio di programmazione) sicuramente si commetteranno errori durante la scrittura del codice. Il **compilatore** troverà questi errori e li segnalerà. Quando l'output contiene messaggi di errore, esaminare attentamente il codice di esempio e il codice nella finestra interattiva per scoprire cosa correggere.

    > Questo esercizio sarà utile per imparare la struttura del codice C#.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Esplorare l'ordine delle operazioni
  durationInMinutes: 7
  content: >
    Il linguaggio C# stabilisce un ordine di precedenza per le diverse operazioni matematiche, con regole coerenti con quelle della matematica.

    La moltiplicazione e la divisione hanno la precedenza rispetto ad addizione e sottrazione.

    Esplorare questo concetto eseguendo il codice seguente nella finestra interattiva:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    L'output dimostra che la moltiplicazione viene eseguita prima dell'addizione.


    È possibile forzare un ordine diverso per le operazioni racchiudendo tra parentesi l'operazione o le operazioni che si vuole eseguire per prime:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Sperimentare ulteriormente combinando molte operazioni diverse. Sostituire la quarta riga sopra con una simile alla seguente:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    È possibile che si sia notato un comportamento interessante per gli interi. La divisione di interi genera sempre un risultato intero, anche quando ci si aspetta che il risultato includa una parte decimale o frazionaria.


    Se questo comportamento non è stato notato, provare il codice seguente:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Selezionare di nuovo **Esegui** per visualizzare i risultati.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Esplorare la precisione e i limiti delle operazioni su interi
  durationInMinutes: 5
  content: >
    L'ultimo esempio dimostra che la divisione di interi tronca il risultato.

    È possibile ottenere il **resto** utilizzando `%` l'operatore **resto,** il carattere:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Il tipo integer in C# è diverso dagli interi matematici per un altro aspetto, ovvero per il tipo `int` esistono limiti minimi e massimi. Eseguire questo codice nella finestra interattiva per visualizzare questi limiti:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Se un calcolo produce un valore che supera questi limiti, si genera una condizione di **underflow** o **overflow**. La risposta sembra proseguire da un limite all'altro. Aggiungere queste due righe nella finestra interattiva per vedere un esempio:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Si noti che la risposta è molto vicina all'intero minimo (negativo). È uguale a `min + 2`.

    L'operazione di addizione **ha causato l'overflow** dei valori consentiti per gli interi.

    La risposta è un numero negativo molto grande, poiché un overflow "ritorna a capo" proseguendo dal valore intero più grande possibile a quello più piccolo.


    Esistono altri tipi numerici con limiti e precisione diversi che è possibile usare quando il tipo `int` non soddisfa le proprie esigenze. Questi tipi verranno presentati nelle prossime lezioni.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Usare il tipo double
  durationInMinutes: 5
  content: >
    Il tipo numerico `double` rappresenta un numero a virgola mobile a precisione doppia. Questi termini potrebbero risultare sconosciuti. Un numero **a virgola mobile** è utile per rappresentare numeri non integrali, con ordine di grandezza molto grande o molto piccolo. Il termine **precisione doppia** indica che questi numeri vengono archiviati con una maggiore precisione rispetto alla **precisione singola**. Nei computer moderni è più comune usare i numeri a precisione doppia rispetto ai numeri a precisione singola.

    Per iniziare a esplorare questo tipo, provare il codice seguente nella finestra interattiva ed esaminare il risultato:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Si noti che la risposta include la parte decimale del quoziente. Provare ora un'espressione leggermente più complessa con valori double:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    L'intervallo di un valore double è molto maggiore rispetto ai valori integer. Provare il codice seguente nella finestra interattiva:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Questi valori vengono stampati con la notazione scientifica. Il numero a sinistra di `E` rappresenta il significando. Il numero a destra è l'esponente, come potenza di 10.


    Come per i numeri decimali in matematica, i valori double in C# possono presentare errori di arrotondamento. Provare questo codice:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Si sa che `0.3` periodico non è esattamente identico a `1/3`.


    ***Esercizio***


    Provare altri calcoli con numeri grandi, numeri piccoli, moltiplicazione e divisione usando il tipo `double`.  Provare calcoli più complessi.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Usare i tipi a virgola fissa
  durationInMinutes: 8
  content: >
    Sono già stati presentati i tipi numerici di base in C#, ovvero integer e double.  C'è un altro tipo da conoscere, ovvero `decimal`. Il tipo `decimal` ha un intervallo più piccolo, ma maggiore precisione di `double`. Il termine **virgola fissa** significa che il separatore decimale (o punto binario) non si sposta. Esaminare il codice seguente:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Si noti che l'intervallo è minore rispetto al tipo `double`. Per vedere la maggiore precisione del tipo decimal, provare il codice seguente:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Il suffisso `M` nei numeri è il modo in cui si indica che una costante deve usare il tipo `decimal`.


    Si noti che le operazioni matematiche con il tipo decimal includono più cifre a destra del separatore decimale.


    ***Esercizio***


    Dopo aver esaminato i diversi tipi numerici, scrivere codice che calcola l'area di un cerchio con raggio di 2,5 cm. Ricordarsi che l'area di un cerchio si calcola moltiplicando il quadrato del raggio per Pi greco. Suggerimento: .NET contiene una costante per Pi greco, <xref:System.Math.PI?displayProperty=nameWithType>, che è possibile usare per tale valore.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).


    Si otterrà una risposta compresa tra 19 e 20.
- title: Completare l'esercizio
  durationInMinutes: 1
  content: >
    I risultati ottenuti sono simili a questi?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    È anche possibile provare alcune altre formule.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    È stata completata l'esercitazione interattiva "Numeri in C#". È possibile selezionare il collegamento **Rami e cicli** di seguito per avviare la successiva esercitazione interattiva oppure visitare il sito [.NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) per scaricare .NET Core SDK, creare un progetto nel computer e continuare a eseguire la codifica. La sezione "Passaggi successivi" riporta a queste esercitazioni.


    Negli argomenti seguenti sono disponibili ulteriori informazioni sui numeri in C#:


    - [Tipi numerici integrali](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Tipi numerici a virgola mobile](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Conversioni numeriche predefinite](../../language-reference/builtin-types/numeric-conversions.md)
